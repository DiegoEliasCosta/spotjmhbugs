<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="messagecollection.xsd">

	<Plugin>
		<ShortDescription>My SpotBugs Plugin</ShortDescription>
		<Details>This plugin provides original detectors</Details>
	</Plugin>

	<Detector
		class="de.heidelberg.pvs.diego.detectors.IgnoredMethodReturnDetector">
		<Details>
			Detector of the JMH_IGNORED_METHOD_RETURN bug pattern.
		</Details>
	</Detector>
  
  <Detector
    class="de.heidelberg.pvs.diego.detectors.IgnoredStaticMethodReturnDetector">
    <Details>
      Detector of the JMH_IGNORED_STATIC_METHOD_RETURN and JMH_IGNORED_STATIC_PRIMITIVE_METHOD_RETURN
       bug pattern.
    </Details>
  </Detector>

	<Detector class="de.heidelberg.pvs.diego.detectors.StateFinalFieldDetector">
		<Details>
			Detector of the JMH_STATE_FINAL_FIELD, JMH_STATE_FINAL_PRIMITIVE and 
      JMH_STATE_FINAL_STATIC_PRIMITIVE bug pattern.
		</Details>
	</Detector>

	<Detector
		class="de.heidelberg.pvs.diego.detectors.LoopInsideBenchmarkDetector">
		<Details>
			Detector of the JMH_LOOP_INSIDE_BENCHMARK inside the
			benchmark bug pattern.
		</Details>
	</Detector>
  
  <Detector
    class="de.heidelberg.pvs.diego.detectors.UnsafeLoopInsideBenchmarkDetector">
    <Details>
      Detector of the JMH_UNSAFELOOP_INSIDE_BENCHMARK inside the
      benchmark bug pattern.
    </Details>
  </Detector>
	
	<Detector
		class="de.heidelberg.pvs.diego.detectors.NotForkedBenchmarkDetector">
		<Details>
			Detector of the JMH_UNFORKED_BENCHMARK inside the
			benchmark bug pattern.
		</Details>
	</Detector>
	
	<Detector
		class="de.heidelberg.pvs.diego.detectors.FixtureWithInvocationScopeDetector">
		<Details>
			Detector of the JMH_FIXTURE_USING_INVOCATION_SCOPE inside the
			benchmark bug pattern.
		</Details>
	</Detector>
	
	<Detector
		class="de.heidelberg.pvs.diego.detectors.SingleShotBenchmarkDetector">
		<Details>
			Detector of the JMH_BENCHMARKMODE_SINGLESHOT inside the
			benchmark bug pattern.
		</Details>
	</Detector>
	
	<Detector
		class="de.heidelberg.pvs.diego.detectors.BenchmarkMethodDetector">
		<Details>
			Detector of the JMH_BENCHMARK_METHOD_FOUND inside the
			benchmark bug pattern.
		</Details>
	</Detector>
  
  
  <Detector class="de.heidelberg.pvs.diego.detectors.DeadStoreBenchmarkDetector">
    <Details>
<![CDATA[
<p>
This detector looks for assignments to local variables that
are never subsequently read. It is a moderately fast detector.
</p>
]]>
  </Details>
</Detector>

<Detector class="de.heidelberg.pvs.diego.detectors.UnsinkedVariableBenchmarkDetector">
    <Details>
<![CDATA[
<p>
This detector looks for assignments to local variables that
are never subsequently read. It is a moderately fast detector.
</p>
]]>
  </Details>
</Detector>
	

	<BugPattern type="JMH_IGNORED_METHOD_RETURN">
		<ShortDescription>Method return not used or consumed by a Blackhole.</ShortDescription>
		<LongDescription>Method return not used or consumed in {1}</LongDescription>
		<Details>
<![CDATA[
<p>Each non-void method call should have its return either used in the benchmark or consumed 
by a Blackhole to avoid	dead-code optimization.</p>
]]>
		</Details>
	</BugPattern>
  
<BugPattern type="JMH_IGNORED_STATIC_METHOD_RETURN">
    <ShortDescription>Static method return not used or consumed by a Blackhole.</ShortDescription>
    <LongDescription>Static method return not used or consumed in {1}</LongDescription>
    <Details>
<![CDATA[
<p>Each static non-void method call should have its return either used in the benchmark or consumed 
by a Blackhole to avoid dead-code optimization.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="JMH_IGNORED_STATIC_PRIMITIVE_METHOD_RETURN">
    <ShortDescription>Static method return not used or consumed by a Blackhole.</ShortDescription>
    <LongDescription>Static method return not used or consumed in {1}</LongDescription>
    <Details>
<![CDATA[
<p>Each static non-void method call should have its return either used in the benchmark or consumed 
by a Blackhole to avoid dead-code optimization.</p>
]]>
    </Details>
  </BugPattern>

	<BugPattern type="JMH_STATE_FINAL_FIELD">
		<ShortDescription>JMH State field declared final.</ShortDescription>
		<LongDescription>State field declared final in {1}</LongDescription>
		<Details>
<![CDATA[
<p>Final fields pose a threat to benchmark measurements
as it gives the compiler the possibility of applying the
constant-folding. If JVM realizes the result of the computation is the
same no matter what, it can cleverly optimize it. In the case of a JMH benchmark, that means
it can move the computation outside of the internal JMH loop.</p>
]]>
		</Details>
	</BugPattern>
  
    <BugPattern type="JMH_STATE_FINAL_PRIMITIVE">
    <ShortDescription>JMH State primitive field declared final.</ShortDescription>
    <LongDescription>State field declared final in {1}</LongDescription>
    <Details>
<![CDATA[
<p>Final primitive fields pose a threat to benchmark measurements
as it gives the compiler the possibility of applying the
constant-folding. If JVM realizes the result of the computation is the
same no matter what, it can cleverly optimize it. In the case of a JMH benchmark, that means
it can move the computation outside of the internal JMH loop.</p>
]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="JMH_STATE_FINAL_STATIC_PRIMITIVE">
    <ShortDescription>JMH State primitive static field declared final.</ShortDescription>
    <LongDescription>Static field declared final in {1}</LongDescription>
    <Details>
<![CDATA[
<p>Final primitive fields pose a threat to benchmark measurements
as it gives the compiler the possibility of applying the
constant-folding. If JVM realizes the result of the computation is the
same no matter what, it can cleverly optimize it. In the case of a JMH benchmark, that means
it can move the computation outside of the internal JMH loop.</p>
]]>
    </Details>
  </BugPattern>


	<BugPattern type="JMH_LOOP_INSIDE_BENCHMARK">
		<ShortDescription>Usage of loops in the JMH benchmark function.</ShortDescription>
		<LongDescription>Usage of loops in the benchmark {1}</LongDescription>
		<Details>
<![CDATA[
<p>Looping is done in the hope of minimizing the overhead of calling the test method, by doing the operations inside
the loop instead of inside the method call. This is a dangerous setting for a micro-benchmark.
The compiler can automagically apply some optimizations to merge the loop iterations.</p>
]]>
		</Details>
	</BugPattern>
  
  
<BugPattern type="JMH_UNSAFELOOP_INSIDE_BENCHMARK">
    <ShortDescription>Suspicious numeric accumulation inside a loop in the JMH benchmark function.</ShortDescription>
    <LongDescription>Accumulation inside loop in the benchmark {1}</LongDescription>
    <Details>
<![CDATA[
<p>Looping is done in the hope of minimizing the overhead of calling the test method, by doing the operations inside
the loop instead of inside the method call. This is a dangerous setting for a micro-benchmark.
The compiler can automagically apply some optimizations to merge the loop iterations.</p>
]]>
    </Details>
  </BugPattern>


<BugPattern type="JMH_NOTFORKED_BENCHMARK">
		<ShortDescription>Benchmark configured with zero forks.</ShortDescription>
		<LongDescription>Benchmark configured with zero forks in {1}.</LongDescription>
		<Details>
<![CDATA[
<p>
JVMs are notoriously good at profile-guided optimizations. This is bad
for benchmarks, because different tests can mix their profiles together,
and then render the "uniformly bad" code for every test. Forking (running
in a separate process) each test can help to evade this issue.
</p>
]]>
		</Details>
	</BugPattern>
	
	
	<BugPattern type="JMH_FIXTURE_USING_INVOCATION_SCOPE">
		<ShortDescription>Fixture methods configured with Invocation scope. </ShortDescription>
		<LongDescription>Fixture methods configured with Invocation scope in {1}.</LongDescription>
		<Details>
<![CDATA[
<p>
This level is only usable for benchmarks taking more than a millisecond
per single Benchmark method invocation. It is a good idea to validate
the impact for your case on ad-hoc basis as well.
</p>
]]>
		</Details>
	</BugPattern>
	
	
	<BugPattern type="JMH_BENCHMARKMODE_SINGLESHOT">
		<ShortDescription>Benchmark configured as a SingleShot. </ShortDescription>
		<LongDescription>Benchmark configured as a SingleShot in {1}.</LongDescription>
		<Details>
<![CDATA[
<p>
This mode is useful to estimate the "cold" performance when you don't want to hide the warmup invocations, or
if you want to see the progress from call to call, or you want to record every single sample. This mode is
work-based, and will run only for a single invocation of {@link Benchmark} method.

Caveats for this mode include:
<ul>
	<li>More warmup/measurement iterations are generally required.</li>
    <li>Timers overhead might be significant if benchmarks are small; switch to {@link #SampleTime} mode if
    that is a problem.</li>
</ul>
</p>
]]>
		</Details>
	</BugPattern>
	
	<BugPattern type="JMH_BENCHMARK_METHOD_FOUND">
		<ShortDescription>JMH Benchmark method found. </ShortDescription>
		<LongDescription>Benchmark method found in {1} - SANITY TEST.</LongDescription>
		<Details>
<![CDATA[


]]>
		</Details>
	</BugPattern>
    <BugPattern type="JMH_DEAD_STORE_VARIABLE">
    <ShortDescription>Dead store to local variable</ShortDescription>
    <LongDescription>Dead store to {2} in {1}</LongDescription>
    <Details>
<![CDATA[
<p>
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
</p>
<p>
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because SpotBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
</p>
]]>
    </Details>
  </BugPattern>
  
  
    <BugPattern type="JMH_UNSINKED_VARIABLE">
    <ShortDescription>Unsinked variable inside benchmark method</ShortDescription>
    <LongDescription>Unsinked variable inside benchmark method {1} </LongDescription>
    <Details>
<![CDATA[
<p>
This instruction assigns a value to a local variable,
but the value is not read or used in any subsequent instruction.
Often, this indicates an error, because the value computed is never
used.
</p>
<p>
Note that Sun's javac compiler often generates dead stores for
final local variables.  Because SpotBugs is a bytecode-based tool,
there is no easy way to eliminate these false positives.
</p>
]]>
    </Details>
  </BugPattern>
  
</MessageCollection>
