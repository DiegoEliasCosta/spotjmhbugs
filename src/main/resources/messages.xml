<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="messagecollection.xsd">

	<Plugin>
		<ShortDescription>My SpotBugs Plugin</ShortDescription>
		<Details>This plugin provides original detectors</Details>
	</Plugin>

	<!-- DETECTORS -->
	<Detector class="de.heidelberg.pvs.diego.checkers.MyDetector">
		<Details>
			Original detector to detect MY_BUG bug pattern.
		</Details>
	</Detector>

	<Detector class="de.heidelberg.pvs.diego.checkers.IgnoredMethodReturnChecker">
		<Details>
			Detector of ignored method returns in a JMH benchmark.
		</Details>
	</Detector>

	<Detector class="de.heidelberg.pvs.diego.checkers.StateFinalFieldChecker">
		<Details>
			Detector of final @State fields in a JMH benchmark.
		</Details>
	</Detector>

	<Detector class="de.heidelberg.pvs.diego.checkers.LoopInsideBenchmarkChecker">
		<Details>
			Detector of loops inside the benchmark.
		</Details>
	</Detector>


	<!-- MESSAGES -->
	<BugPattern type="MY_BUG">
		<ShortDescription>Explain bug pattern shortly.</ShortDescription>
		<LongDescription>
			Explain existing problem in code, and how developer
			should improve their
			implementation.
		</LongDescription>
		<Details>
<![CDATA[
<p>Explain existing problem in code, and how developer should improve their implementation.</p>
]]>
		</Details>
	</BugPattern>


	<BugPattern type="JMH_IGNORED_METHOD_RETURN">
		<ShortDescription>Non-void method calls should have their returns
			consumed by a Blackhole.
		</ShortDescription>
		<LongDescription>
			Explain existing problem in code, and how developer
			should improve their
			implementation.
		</LongDescription>
		<Details>
<![CDATA[
<p>Explain existing problem in code, and how developer should improve their implementation.</p>
]]>
		</Details>
	</BugPattern>

	<BugPattern type="JMH_STATE_FINAL_FIELD">
		<ShortDescription>State fields should not be declared final.
		</ShortDescription>
		<LongDescription>
			Final fields pose a threat to benchmark measurements
			as it gives the compiler
			the possibility of applying the
			constant-folding.
			If JVM realizes the result of the computation is the
			same no matter what,
			it can cleverly optimize it. In the case of a JMH benchmark, that means
			it can move the
			computation outside of the internal JMH loop.
		</LongDescription>
		<Details>
<![CDATA[
<p>Explain existing problem in code, and how developer should improve their implementation.</p>
]]>
		</Details>
	</BugPattern>


	<BugPattern type="JMH_LOOP_INSIDE_BENCHMARK">
		<ShortDescription>Avoid the usage of loops in the JMH benchmark
			function.</ShortDescription>
		<LongDescription>
			Looping is done in the hope of minimizing the
			overhead of calling the
			test method, by doing the operations inside the loop instead of inside
			the method call. Don't buy this argument; you will see there is more
			magic happening when we allow optimizers to merge the loop
			iterations.
		</LongDescription>
		<Details>
<![CDATA[
<p>Explain existing problem in code, and how developer should improve their implementation.</p>
]]>
		</Details>
	</BugPattern>


</MessageCollection>
